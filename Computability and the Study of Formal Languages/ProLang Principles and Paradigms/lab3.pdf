Factorial.cpp token list

int
main
(
)
{
int
Identifier	n
,
Identifier	i
,
Identifier	f
;
Identifier	n
=
IntLiteral	3
;
Identifier	i
=
IntLiteral	1
;
Identifier	f
=
IntLiteral	1
;
while
(
Identifier	i
<
Identifier	n
)
{
Identifier	i
=
Identifier	i
+
IntLiteral	1
;
Identifier	f
=
Identifier	f
*
Identifier	i
;
}
}


(concrete abstract syntax): 
  Declarations: 
    Declarations = {<n, int>, <i, int>, <f, int>}
  Block: 
    Assignment: 
      Variable: n
      IntValue: 3
    Assignment: 
      Variable: i
      IntValue: 1
    Assignment: 
      Variable: f
      IntValue: 1
    Loop: 
      Binary: 
        Operator: <
        Variable: i
        Variable: n
      Block: 
        Assignment: 
	 Variable: i
          Binary: 
            Operator: +
            Variable: i
            IntValue: 1
        Assignment: 
          Variable: f
          Binary: 
            Operator: *
            Variable: f
            Variable: i


Abstract Syntax Tree

Program (abstract syntax): 
  Declarations: 
    Declarations = {<n, int>, <i, int>, <f, int>}
  Block: 
    Assignment: 
      Variable: n
      IntValue: 3
    Assignment: 
      Variable: i
      IntValue: 1
    Assignment: 
      Variable: f
      IntValue: 1
    Loop: 
      Binary: 
        Operator: INT<
        Variable: i
        Variable: n
      Block: 
        Assignment: 
          Variable: i
          Binary: 
            Operator: INT+
            Variable: i
            IntValue: 1
        Assignment: 
          Variable: f
          Binary: 
            Operator: INT*
            Variable: f
            Variable: i



